@rendermode InteractiveServer

@using ProjetoAplicadoIII.Entities
@using ProjetoAplicadoIII.Infrastructure.Context
@using ProjetoAplicadoIII.Infrastructure.Interfaces
@using ProjetoAplicadoIII.Models

@inject SqliteDbContext Db
@inject IUserRepository UserRepo

<EditForm Model="UserModel" OnValidSubmit="AddUserAsync" FormName="AddUserForm">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="name" class="form-label">Nome</label>
        <InputText id="name" @bind-Value="UserModel!.Name" class="form-control" placeholder="Digite seu nome" maxlength="64" />
        <ValidationMessage For="@(() => UserModel!.Name)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">E-mail</label>
        <InputText id="email" @bind-Value="UserModel.Email" class="form-control" placeholder="nome@exemplo.com" type="text" maxlength="254" />
        <ValidationMessage For="@(() => UserModel.Email)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Senha</label>
        <InputText id="password" @bind-Value="UserModel.Password" class="form-control" type="password" placeholder="Senha" maxlength="255" />
        <ValidationMessage For="@(() => UserModel.Password)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirmar senha</label>
        <InputText id="confirmPassword" @bind-Value="UserModel.ConfirmPassword" class="form-control" type="password" placeholder="Confirmar senha" maxlength="255" />
        <ValidationMessage For="@(() => UserModel.ConfirmPassword)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Registrar</button>
</EditForm>

<Modal @ref="SuccessModalRef" Title="Sucesso!" />
<Modal @ref="ErrorModalRef" Title="Erro!" />

@code {
    private UserModel? UserModel { get; set; }
    private Modal? SuccessModalRef;
    private Modal? ErrorModalRef;

    protected override void OnInitialized() => UserModel ??= new();

    private async Task<long> AddUserAsync()
    {
        var user = User.FromModel(UserModel!);

        await Db.RunInTransactionAsync(async () =>
        {
            await UserRepo.AddAsync(user);
        },
        () =>
        {
            ErrorModalRef?.Show();
        });

        SuccessModalRef?.Show();

        UserModel = new();
        return user.Id;
    }
}
