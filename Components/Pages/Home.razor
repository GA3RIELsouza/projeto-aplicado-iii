@page "/"
@using ProjetoAplicadoIII.Entities
@using ProjetoAplicadoIII.Infrastructure.Context
@using ProjetoAplicadoIII.Infrastructure.Interfaces
@using ProjetoAplicadoIII.Models
@inject MainDbContext Db
@inject IUserRepository UserRepo
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<EditForm Model="UserModel" OnValidSubmit="AddUserAsync" FormName="AddUserForm" @onsubmit:preventDefault>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>
            Nome
            <InputText @bind-Value="UserModel!.Name" placeholder="Nome" maxlength="64" />
        </label>
    </div>

    <div>
        <label>
            E-mail
            <InputText @bind-Value="UserModel.Email" placeholder="E-mail" type="email" maxlength="254" />
        </label>
    </div>

    <div>
        <label>
            Senha
            <InputText @bind-Value="UserModel.Password" placeholder="Senha" type="password" maxlength="255" />
        </label>
    </div>

    <div>
        <label>
            Confirmar senha
            <InputText @bind-Value="UserModel.ConfirmPassword" placeholder="Confirmar senha" type="password" maxlength="255" />
        </label>
    </div>
    
    <div>
        <button type="submit">Registrar</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private UserModel? UserModel { get; set; }

    protected override void OnInitialized() => UserModel ??= new();

    private async Task<long> AddUserAsync()
    {
        var user = User.FromModel(UserModel!);

        await Db.RunInTransactionAsync(async () =>
        {
            await UserRepo.AddAsync(user);
        });

        UserModel = new();
        return user.Id;
    }
}
